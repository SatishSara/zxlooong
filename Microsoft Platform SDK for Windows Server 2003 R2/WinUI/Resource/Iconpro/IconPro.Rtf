{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\widctlpar \f4\fs20 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar \f4\fs20 \sbasedon0\snext15 footnote text;}{\*\cs16 \additive\super \sbasedon10 footnote reference;}}{\info
{\author John Hornick}{\creatim\yr1995\mo9\dy5\hr6\min52}{\version1}{\edmins0}{\nofpages0}{\nofwords0}{\nofchars0}{\vern49221}}\widowctrl\ftnbj\aenddoc\hyphcaps0\formshade \fet0\sectd \linex0\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}
{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9
\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \widctlpar \f4\fs20 {\cs16\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} HELP_INDEX}} {\cs16\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K
} IconPro}} {\cs16\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super $} IconPro Version 1.0}} {\f5\fs28 IconPro Icon Manager}
\par 
\par {\f5 IconPro is designed to manipulate icons having images with bit depths from 1bpp to 32bpp, as well as sizes from 16x16 to 128x128.
\par 
\par IconPro provides no editing capabilities. To create an icon, the user must first edit the image in DIB format, using a program like PBRUSH. Then the image can be imported into IconPro without loss of bit depth.
\par 
\par Note that IconPro restricts the size of its child windows, so MDI tiling can look different than expected.
\par 
\par When extracting icons from DLL and EXE files, IconPro will operate only on 32bit files.
\par 
\par 
\par 
\par }{\f5\uldb How to use IconPro}{\v\f5 ICONPRO_USAGE}{\f5 
\par }{\f5\uldb More Information on Icons in Win32}{\v\f5 ICONS_IN_WIN32}{\f5 
\par }
\par \page {\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} ICONPRO_USAGE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Usage}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} IconPro Usage}}{\f5  }{\f5\fs24 IconPro Usage}{\f5 
\par 
\par IconPro displays icons in MDI child windows, showing you one image at a time. Since an icon may contain more than one image, a list box is provided below the display area to choose which image to look at.
\par 
\par IconPro is capable of reading and writing ICO files, as well as extracting icons from Win32 PE format DLLs and EXEs. It can also import from/export to BMP files and copy/paste with the clipboard. 
\par 
\par To }{\f5\ul set the transparent color}{\ul  }{\v SET_TRANSPARENT_COLOR}{\f5 , left-click on the XOR mask while holding the <ctrl> key down.
\par 
\par Menu Options
\par File
\par \tab }{\f5\ul New Icon}{\v\f5 FILE_NEWICON}{\f5 
\par \tab }{\f5\ul Open Icon File}{\v\f5 FILE_OPENICONFILE}{\f5 
\par \tab }{\f5\ul Extract From DLL/EXE}{\v\f5 FILE_EXTRACTFROMDLLEXE}{\f5 
\par \tab }{\f5\ul Close}{\v\f5 FILE_CLOSE}{\f5 
\par \tab }{\f5\ul Save ICO File}{\v\f5 FILE_SAVEICOFILE}{\f5 
\par \tab }{\f5\ul Save As ICO File}{\v\f5 FILE_SAVEASICOFILE}{\f5 
\par \tab }{\f5\ul Exit}{\v\f5 FILE_EXIT}{\f5 
\par Edit
\par \tab }{\f5\ul Copy}{\v\f5 EDIT_COPY}{\f5 
\par \tab }{\f5\ul Paste}{\v\f5 EDIT_PASTE}{\f5 
\par \tab }{\f5\ul Stretch Paste}{\v\f5 EDIT_STRETCHPASTE}{\f5 
\par \tab }{\f5\ul Import BMP}{\v\f5 EDIT_IMPORTBMP}{\f5 
\par \tab }{\f5\ul Stretch Import BMP}{\v\f5 EDIT_STRETCHIMPORTBMP}{\f5 
\par \tab }{\f5\ul Export BMP}{\v\f5 EDIT_EXPORTBMP}{\f5 
\par \tab }{\f5\ul Add Format}{\v\f5 EDIT_ADDFORMAT}{\f5 
\par \tab }{\f5\ul Remove Format}{\v\f5 EDIT_REMOVEFORMAT}{\f5 
\par Window
\par \tab }{\f5\ul Arrange Icons}{\v\f5 WINDOW_ARRANGEICONS}{\f5 
\par \tab }{\f5\ul Cascade}{\v\f5 WINDOW_CASCADE}{\f5 
\par \tab }{\f5\ul Tile Horizontal}{\v\f5 WINDOW_TILEHORIZONTAL}{\f5 
\par \tab }{\f5\ul Tile Vertical}{\v\f5 WINDOW_TILEVERTICAL}{\f5 
\par Help
\par \tab }{\f5\ul Contents}{\v\f5 HELP_HELPCONTENTS}{\f5 
\par \tab }{\f5\ul About}{\v\f5 HELP_HELPABOUT}{\f5 
\par 
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} ICONS_IN_WIN32}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Icons Win32}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Icons In Win32}}{\f5  }{\f5\fs24 Icons in Win32}{\f5 
\par 
\par Icon images are stored in }{\f5\uldb ICO files}{\v\f5 ICO_FILE_FORMAT}{\f5 
 and as resources in EXEs and DLLs in near DIB format - a BITMAPINFO followed by XOR bits followed by AND bits. A block of memory like this can be passed to CreateIconFromResourceEx() to create a HICON from the resource. This API expects the bmiHeader.biH
eight member of the BITMAPINFO to be the sum of the heights of the XOR and AND masks. Further, this API is not implemented on NT at this time, so CreateIconFromResource() must be used instead.
\par 
\par When creating the AND mask for an icon (or any transparent BitBlt), a simple method is to BitBlt from the source image to a mono bitmap and let GDI do the conversions based on SetBkColor(). This will not work with DIBSections. Any BitBlt'ing with DIBSecti
ons results in color mapping without regard to the background color.
\par 
\par DIBSections can not be used in the ICONINFO structure passed to CreateIconIndirect(). DDBs must be used there.
\par 
\par Currently, during the icon selection process in Windows 95, all bit depths >= 8 are treated as equal. Therefore, it is pointless to have both a 24bpp and an 8bpp image in the same ICO file. When running in any video mode of at least 8bpp, Windows will sim
ply choose the first one.}{\f5\uldb 
\par 
\par }\page {\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} ICO_FILE_FORMAT}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} File Format}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} ICO File Format}}{\f5  }{\f5\fs24  ICO File Format}{\f5 
\par 
\par Icons are normally stored in ICO files. The ICO file format is documented in the Windows 3.1 SDK Programmer's Reference, Volume 4: Resources, Chapter 1: Graphics File Formats.
\par 
\par The ICO file starts with an ICONDIR structure. The ICONDIR structure is defined as:
\par 
\par typedef struct 
\par \{
\par \tab WORD\tab \tab \tab idReserved;   // Reserved
\par \tab WORD\tab \tab \tab idType;       // resource type (1 for icons)
\par \tab WORD\tab \tab \tab idCount;      // how many images?
\par \tab ICONDIRENTRY\tab idEntries[1]; // entries for each image (idCount of 'em)
\par \} ICONDIR, *LPICONDIR;
\par 
\par 
\par The ICONDIRENTRY structure is defined as:
\par 
\par typedef struct
\par \{
\par \tab BYTE\tab bWidth;               // Width of the image
\par \tab BYTE\tab bHeight;              // Height of the image (times 2)
\par \tab BYTE\tab bColorCount;          // Number of colors in image (0 if >=8bpp)
\par \tab BYTE\tab bReserved;            // Reserved
\par \tab WORD\tab wPlanes;              // Color Planes
\par \tab WORD\tab wBitCount;            // Bits per pixel
\par \tab DWORD\tab dwBytesInRes;         // how many bytes in this resource?
\par \tab DWORD\tab dwImageOffset;        // where in the file is this image
\par \} ICONDIRENTRY, *LPICONDIRENTRY;
\par 
\par 
\par So, the file consists of the header followed by the bits for each image. The bits for each image can be located by seeking to dwImageOffset in the file. The format of the bits follows:
\par 
\par The bits for each image are stored in something similar to CF_DIB format. First is a BITMAPINFO structure, followed by the DIB bits of the XOR mask, followed by the DIB bits of the AND mask. 
\par Note the following two caveats:
\par 1) The bmiHeader.biHeight member of the BITMAPINFO structure indicates the height of the XOR mask plus the height of the AND mask.
\par 2) The AND mask is monochrome, and has no BITMAPINFO.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} FILE_NEWICON}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} New}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain \s15\widctlpar 
\f4\fs20 {\cs16\super $} New Icon}}{\f5   File->New Icon
\par This command creates a new icon resource and a window in which to display it. The newly created icon resource has no images in it. New images would need to be created using the \ldblquote Edit->Add Format\rdblquote  command.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} FILE_OPENICONFILE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Open}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Open Icon}}{\f5   File->Open Icon File
\par This command opens an ICO file and creates a new window in which to display its images. The images stored in the ICO file are enumerated in the listbox at the bottom of the display window.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} FILE_EXTRACTFROMDLLEXE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Extract}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Extract from DLL/EXE}}{\f5  File->Extract From DLL/EXE
\par This command extracts an icon resource from a 32bit DLL or EXE file. (It will fail on 16bit files). If the file contains more than one icon resource, a dialog is shown allowing the choice of which icon resource to extract.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} FILE_CLOSE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Close}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain \s15\widctlpar 
\f4\fs20 {\cs16\super $} Close}}{\f5  File->Close
\par This command closes the current icon resource child window. If the image has been modified, a dialog will be shown asking whether to save changes.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} FILE_SAVEICOFILE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Save}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Save ICO File}}{\f5  File->Save ICO File
\par This command saves the current icon resource to its ICO file.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} FILE_SAVEASICOFILE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} SaveAs}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Save As ICO File}}{\f5  File->Save As ICO File
\par This command saves the current icon resource to a newly named ICO file.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} FILE_EXIT}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Exit}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain \s15\widctlpar 
\f4\fs20 {\cs16\super $} Exit}}{\f5  File->Exit
\par This command terminates IconPro.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} EDIT_COPY}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Copy}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain \s15\widctlpar 
\f4\fs20 {\cs16\super $} Edit Copy}}{\f5  Edit->Copy
\par This command causes the XOR mask of the current icon resource\rquote s current image to be placed on the clipboard in CF_DIB format.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} EDIT_PASTE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Paste}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain \s15\widctlpar 
\f4\fs20 {\cs16\super $} Edit Paste}}{\f5  Edit->Paste
\par This command takes the CF_DIB format image from the clipboard and uses it to replace the XOR mask of the current icon resource\rquote 
s current image. If the clipboard image is larger than the current icon image, only the corner of the image is used. If the clipboard image is smaller than the current icon image, some of the resultant icon image may be black or undefined.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} EDIT_STRETCHPASTE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Stretch Paste}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Stretch Paste}}{\f5  Edit->Stretch Paste
\par This command takes the CF_DIB format image from the clipboard and uses it to replace the XOR mask of the current icon resource\rquote s current image, stretching it to fit the dimensions of the icon image.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} EDIT_IMPORTBMP}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Import BMP}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Import BMP}}{\f5  Edit->Import BMP
\par This command reads a BMP file and uses it to replace the XOR mask of the current icon resource\rquote s current image. If the BMP bitmap is 
larger than the current icon image, only the corner of the image is used. If the BMP bitmap is smaller than the current icon image, some of the resultant icon image may be black or undefined.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} EDIT_STRETCHIMPORTBMP}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Stretch Import BMP}}{\f5  }{\cs16\f5\super ${\footnote 
\pard\plain \s15\widctlpar \f4\fs20 {\cs16\super $} Stretch Import BMP}}{\f5  Edit->Stretch Import BMP
\par This command reads a BMP file and uses it to replace the XOR mask of the current icon resource\rquote s current image, stretching it to fit the dimensions of the icon image.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} EDIT_EXPORTBMP}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Export  BMP}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Export BMP}}{\f5  Edit->Export BMP
\par This command causes the XOR mask of the current icon resource\rquote s current image to be written to a newly named BMP file.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} EDIT_ADDFORMAT}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Add Format}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Add Format}}{\f5  Edit->Add Format
\par This command launches a dialog that allows the creation of a new icon image in the current icon resource. Slider controls are provided to allow the Width, Height, and Color Depth to be chosen. Valid ranges for these values are:
\par 
\par Width: Min 16, Max 128
\par Height: Min 16, Max 128
\par Color Depth: Min 1bpp, Max 32bpp
\par 
\par Two images with identical Width, Height and Color Depth are not allowed in the same icon resource.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} EDIT_REMOVEFORMAT}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Remove Format}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Remove Format}}{\f5  Edit->Remove Format
\par This command removes the current icon image from the current icon resource.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} WINDOW_ARRANGEICONS}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Arrange}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Arrange Icons}}{\f5  Window->Arrange Icons
\par This command arranges the MDI child icons.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} WINDOW_CASCADE}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Cascade}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Cascade}}{\f5  Window->Cascade
\par This command arranges the MDI child windows in a cascade effect.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} WINDOW_TILEHORIZONTAL}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Tile Horizontal}}{\f5  }{\cs16\f5\super ${\footnote 
\pard\plain \s15\widctlpar \f4\fs20 {\cs16\super $} Tile Horizontal}}{\f5  Window->Tile Horizontal
\par This command horizontally tiles the MDI child windows.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} WINDOW_TILEVERTICAL}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Tile Vertical}}{\f5  }{\cs16\f5\super ${\footnote 
\pard\plain \s15\widctlpar \f4\fs20 {\cs16\super $} Tile Vertical}}{\f5  Window->Tile Vertical
\par This command vertically tiles the MDI child windows.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} HELP_HELPCONTENTS}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Help Contents}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Help Contents}}{\f5  Help->Contents
\par This command launches help for IconPro.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} HELP_HELPABOUT}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Help About}}{\f5  }{\cs16\f5\super ${\footnote \pard\plain 
\s15\widctlpar \f4\fs20 {\cs16\super $} Help About}}{\f5  Help->About
\par This command displays the About box.
\par \page }{\cs16\f5\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super #} SET_TRANSPARENT_COLOR}}{\f5  }{\cs16\f5\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20 {\cs16\super K} Transparent Color}}{\f5  }{\cs16\f5\super ${\footnote 
\pard\plain \s15\widctlpar \f4\fs20 {\cs16\super $} Setting the Transparent Color}}{\f5  Setting the Transparent Color
\par IconPro can recalculate the XOR and AND masks using a given color as a transparent color. This means that any pixel with that color in the XOR mask is treated as transparent when the icon is drawn. This transparent color can be selected in IconPro by hold
ing the <ctrl> key while clicking the left mouse button while the mouse cursor is over a pixel with the appropriate color in the XOR mask.
\par \page 
\par }}